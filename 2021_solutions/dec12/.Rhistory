outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
print("here")
print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
print("here")
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
print("here2")
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
count <- count  +pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
#
outlander(c("start"),paths = input)
#
outlander(c("start"),paths = input)
input <- read.table("smol_test.txt",sep = '-')
pathfinder <- function(cur_path,visited = c("start"),paths,count = 0){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the choice is a lowercase AND has not been visited yet
if (str_to_upper(choice) != choice & length(visited[visited == choice]) == 0 ){
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
else if (str_to_upper(choice) == choice) {
count <- count  +pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
pathfinder(c("start"),visited = c("start"),paths = input)
pathfinder <- function(cur_path,visited = c("start"),paths,count = 0){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the choice is a lowercase AND has not been visited yet
if (str_to_upper(choice) != choice & length(visited[visited == choice]) == 0 ){
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
else if (str_to_upper(choice) == choice) {
count <- count  +pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
pathfinder(c("start"),visited = c("start"),paths = input)
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
#print("here")
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
#print("here2")
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
count <- count  +pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
#
outlander(c("start"),paths = input)
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
print("test")
cur <- cur_path[length(cur_path)]
if (cur == "end"){
print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
#print("here")
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
#print("here2")
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
count <- count  +pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
#
outlander(c("start"),paths = input)
#
outlander(c("start"),paths = input,count = 0)
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
print("here")
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
print("here2")
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
print("here3")
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
#
outlander(c("start"),paths = input,count = 0)
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
#
outlander(c("start"),paths = input)
input <- read.table("sml_test.txt",sep = '-')
#
outlander(c("start"),paths = input)
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
print(paste(cur_path,collapse = ","))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
input <- read.table("smol_test.txt",sep = '-')
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
print(paste(cur_path,collapse = ","))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
#
outlander(c("start"),paths = input)
expected <- read.table("expected_smol.txt")
output <- read.table("output.txt")
extra <- output[output != expected]
extra <- anti_join(output,expected)
extra
length(inner_join(extra,expected))
inner_join(extra,expected)
length(inner_join(extra,output))
inner_join(extra,output)
extra
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
print(paste(cur_path,collapse = ","))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
if (revisited){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
if (revisited){
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
return(count)
}
outlander(c("start"),paths = input)
input <- read.table("sml_test.txt",sep = '-')
outlander(c("start"),paths = input)
input <- read.table("sl_test.txt",sep = '-')
outlander(c("start"),paths = input)
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = ","))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
if (revisited){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
if (revisited){
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
return(count)
}
input <- read.table("test.txt",sep = '-')
pathfinder <- function(cur_path,visited = c("start"),paths,count = 0){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the choice is a lowercase AND has not been visited yet
if (str_to_upper(choice) != choice & length(visited[visited == choice]) == 0 ){
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
else if (str_to_upper(choice) == choice) {
count <- count  +pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = ","))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
if (revisited){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
if (revisited){
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
return(count)
}
tic()
pathfinder(c("start"),visited = c("start"),paths = input)
outlander(c("start"),paths = input)
toc()
## Solution to Day 12 Puzzle ##
#Execution time is ~ 32.34 seconds in total
#Need to find a more efficient algorithm
library(stringr)
library(tictoc)
input <- read.table("test.txt",sep = '-')
# Part 1 #
pathfinder <- function(cur_path,visited = c("start"),paths,count = 0){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = "-"))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the choice is a lowercase AND has not been visited yet
if (str_to_upper(choice) != choice & length(visited[visited == choice]) == 0 ){
count <- count + pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
else if (str_to_upper(choice) == choice) {
count <- count  +pathfinder(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
return(count)
}
# Part 2 #
outlander <- function(cur_path,visited = c("start","start"),paths,count = 0,revisited = FALSE){
cur <- cur_path[length(cur_path)]
if (cur == "end"){
#print(paste(cur_path,collapse = ","))
return(1)
}
#store the options from your given position
choices <- c(paths[paths[,1] == cur,2],paths[paths[,2] == cur,1])
for (choice in choices){
#if the current choice is a small cave
if (str_to_upper(choice) != choice){
#If we have already wandered then we only go to small caves we have not visited
if (revisited & length(visited[visited == choice]) == 0 ){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
#If we are yet to revisit a small cave and the current small cave has been visited
else if (!revisited & length(visited[visited == choice]) == 1){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else if (length(visited[visited == choice]) == 0){
if (revisited){
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count + outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
#if the next choice is a large cave
else if (str_to_upper(choice) == choice) {
if (revisited){
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths,revisited = TRUE)
}
else{
count <- count  +outlander(c(cur_path,choice),visited = c(visited,choice),paths)
}
}
}
return(count)
}
tic()
pathfinder(c("start"),visited = c("start"),paths = input)
outlander(c("start"),paths = input)
toc()
