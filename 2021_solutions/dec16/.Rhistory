if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
for (i in 1:nrow(next_down)){
x <- next_down[i,1]
y <- next_down[i,2]
xx <- down[i,1]
yy <- down[i,2]
print(c(x,y,input[x,y]))
if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
i <- i + 1
}
return(i)
}
iterate(grid)
iterate <- function(input){
not_stopped <- TRUE
i <- 0
while(not_stopped){
not_stopped <- FALSE
right <- data.frame(which(input == '>', arr.ind = TRUE))
down <- data.frame(which(input == "v", arr.ind = TRUE))
next_right <- right
next_right$col <- next_right$col+1
next_right$col[next_right$col > ncol(input)] <- 1
next_down <- down
next_down$row <- next_down$row+1
next_down$row[next_down$row > nrow(input)] <- 1
for (i in 1:nrow(next_right)){
x <- next_right[i,1]
y <- next_right[i,2]
xx <- right[i,1]
yy <- right[i,2]
#print(c(x,y,input[x,y]))
test <- is.na(input[x,y])
if (test){print(c(down,right,input))}
if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
for (i in 1:nrow(next_down)){
x <- next_down[i,1]
y <- next_down[i,2]
xx <- down[i,1]
yy <- down[i,2]
print(c(x,y,input[x,y]))
if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
i <- i + 1
}
return(i)
}
iterate(grid)
iterate <- function(input){
not_stopped <- TRUE
i <- 0
while(not_stopped){
not_stopped <- FALSE
right <- data.frame(which(input == '>', arr.ind = TRUE))
down <- data.frame(which(input == "v", arr.ind = TRUE))
next_right <- right
next_right$col <- next_right$col+1
next_right$col[next_right$col > ncol(input)] <- 1
next_down <- down
next_down$row <- next_down$row+1
next_down$row[next_down$row > nrow(input)] <- 1
for (i in 1:nrow(next_right)){
x <- next_right[i,1]
y <- next_right[i,2]
xx <- right[i,1]
yy <- right[i,2]
#print(c(x,y,input[x,y]))
if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
for (i in 1:nrow(next_down)){
x <- next_down[i,1]
y <- next_down[i,2]
xx <- down[i,1]
yy <- down[i,2]
test <- is.na(input[x,y])
if (test){print(c(down,right,input))}
if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
i <- i + 1
}
return(i)
}
iterate(grid)
iterate <- function(input){
not_stopped <- TRUE
i <- 0
while(not_stopped){
not_stopped <- FALSE
right <- data.frame(which(input == '>', arr.ind = TRUE))
down <- data.frame(which(input == "v", arr.ind = TRUE))
next_right <- right
next_right$col <- next_right$col+1
next_right$col[next_right$col > ncol(input)] <- 1
next_down <- down
next_down$row <- next_down$row+1
next_down$row[next_down$row > nrow(input)] <- 1
for (i in 1:nrow(next_right)){
x <- next_right[i,1]
y <- next_right[i,2]
xx <- right[i,1]
yy <- right[i,2]
#print(c(x,y,input[x,y]))
if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
for (i in 1:nrow(next_down)){
x <- next_down[i,1]
y <- next_down[i,2]
xx <- down[i,1]
yy <- down[i,2]
test <- is.na(input[x,y])
print(test)
if (test){print(c(down,right,input))}
if (input[x,y] == '.'){
not_stopped <- TRUE
input[x,y] <- '>'
input[xx,yy] <- '.'
}
}
i <- i + 1
}
return(i)
}
iterate(grid)
setwd("C:/Users/User/advent_of_code/dec16")
key <- read.table("key.txt", sep = "=", colClasses = "character")
bits <- read.table("test.txt")[[1]]
# hexadecimal to binary
binary <- c()
for (i in 1:str_length(bits)){
binary <- c(binary,key[key$V1 == str_sub(bits,i,i),2])
}
binary <- paste(binary, collapse = '')
binary
binary
key <- read.table("key.txt", sep = "=", colClasses = "character")
bits <- read.table("test.txt")[[1]]
# hexadecimal to binary
binary <- c()
for (i in 1:str_length(bits)){
binary <- c(binary,key[key$V1 == str_sub(bits,i,i),2])
}
binary <- paste(binary, collapse = '')
bits <- read.table("test.txt")
# hexadecimal to binary
binary <- c()
for (i in 1:str_length(bits)){
binary <- c(binary,key[key$V1 == str_sub(bits,i,i),2])
}
binary <- paste(binary, collapse = '')
### Solution to Day 16 Puzzle ###
library(tidyverse)
key <- read.table("key.txt", sep = "=", colClasses = "character")
bits <- read.table("test.txt")[[1]]
# hexadecimal to binary
binary <- c()
for (i in 1:str_length(bits)){
binary <- c(binary,key[key$V1 == str_sub(bits,i,i),2])
}
binary <- paste(binary, collapse = '')
bits
vy <- 10
t <- 2*vy+1
speed <- vy
while (y > -5){
y <- y + speed
t <- t + 1
speed <- speed - 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,speed)
}
}
# Mini_test target
target_x <- c(20,30)
target_y <- c(-10,-5)
#Velocity
vx <- 1
vy <- 10
#Position
x <- 0
y <- 0
time_y <- c()
speeds_y <- c()
max_y <- 10
t <- 2*vy+1
speed <- vy
while (y > -5){
y <- y + speed
t <- t + 1
speed <- speed - 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,speed)
}
}
time_y <- c()
speeds_y <- c()
max_y <- 10
t <- 2*vy+1
speed <- vy
while (y > -5){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
min(target_y)
y >= min(target_y) & y <= max(target_y)
y <- 0
t <- 2*vy+1
speed <- vy
while (y > -5){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
time_y <- c()
speeds_y <- c()
max_y <- 10
for (vy in 1:max_y){
t <- 2*vy+1
speed <- vy
while (y > -5){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
}
time_y <- c()
speeds_y <- c()
max_y <- 10
for (vy in 1:max_y){
t <- 2*vy+1
speed <- vy
while (y > -5){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
}
time_y <- c()
speeds_y <- c()
max_y <- 10
for (vy in 1:max_y){
y = 0
t <- 2*vy+1
speed <- vy
while (y > -5){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
}
y_times <- cbind(time_y,speeds_y)
y_times
quad1 <- -0.5 + sqrt(1-(8*min(target_x)))*0.5
8*min(target_x)
quad1 <- -0.5 + sqrt(1+(8*min(target_x)))*0.5
quad1 <- round(-0.5 + sqrt(1+(8*min(target_x)))*0.5)
quad2 <- round(-0.5 - sqrt(1+(8*min(target_x)))*0.5)
vals <- c(quad1,quad2)
vals[vals > 0]
time_x <- c()
speeds_x <- c()
max_vx <- max(target_x)
quad1 <- round(-0.5 + sqrt(1+(8*min(target_x)))*0.5)
quad2 <- round(-0.5 - sqrt(1+(8*min(target_x)))*0.5)
vals <- c(quad1,quad2)
if (min(target_x) > 0){
min_vx <- min(vals[vals > 0])
}
elif (min(target_x) < 0) {
min_vx <- max(vals[vals < 0])
}
for (vx in min_vx:max_vx){
t <- 0
x <- 0
speed <- vx
while (x < max(target_x) & speed > 0) {
x <- x + speed
speed <- speed - 1
t <- t + 1
if (x >= min(target_x) & x <= max(target_x)){
time_x <- c(time_x,t)
speeds_x <- c(speeds_x,vx)
}
}
}
x_times <- c(time_x,speeds_x)
x_times
x_times <- cbind(time_x,speeds_x)
x_times
valid_y <- y_times[y_times[,1] %in% x_times[,1],]
valid_y
y_times
x_times
# Mini_test target
target_x <- c(20,30)
target_y <- c(-10,-5)
# Test target
#target_x <- c(257,286)
#target_y <- c(-101,-57)
# Need to find min VX required to reach target --> based on the sum of an arithmetic sequence of d = 1 with n1 = 0
#this will define the maximum number of steps y can take to reach target_y
time_x <- c()
speeds_x <- c()
max_vx <- max(target_x)
quad1 <- round(-0.5 + sqrt(1+(8*min(target_x)))*0.5)
quad2 <- round(-0.5 - sqrt(1+(8*min(target_x)))*0.5)
vals <- c(quad1,quad2)
if (min(target_x) > 0){
min_vx <- min(vals[vals > 0])
}
elif (min(target_x) < 0) {
min_vx <- max(vals[vals < 0])
}
for (vx in min_vx:max_vx){
t <- 0
x <- 0
speed <- vx
while (x < max(target_x) & speed > 0) {
x <- x + speed
speed <- speed - 1
t <- t + 1
if (x >= min(target_x) & x <= max(target_x)){
time_x <- c(time_x,t)
speeds_x <- c(speeds_x,vx)
}
}
}
x_times <- cbind(time_x,speeds_x)
time_y <- c()
speeds_y <- c()
max_vy <- max(abs(target_y))
for (vy in 1:max_vy){
y = 0
t <- 2*vy+1
speed <- vy
while (y > min(target_y)){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
}
y_times <- cbind(time_y,speeds_y)
valid_y <- y_times[y_times[,1] %in% x_times[,1],]
valid_y
y_times
x_times
valid_y
is will define the maximum number of steps y can take to reach target_y
time_x <- c()
speeds_x <- c()
max_vx <- max(target_x)
quad1 <- round(-0.5 + sqrt(1+(8*min(target_x)))*0.5)
quad2 <- round(-0.5 - sqrt(1+(8*min(target_x)))*0.5)
vals <- c(quad1,quad2)
if (min(target_x) > 0){
min_vx <- min(vals[vals > 0])
}
elif (min(target_x) < 0) {
min_vx <- max(vals[vals < 0])
}
for (vx in min_vx:max_vx){
t <- 0
x <- 0
speed <- vx
while (x < max(target_x) & speed > 0) {
x <- x + speed
speed <- speed - 1
t <- t + 1
if (x >= min(target_x) & x <= max(target_x)){
time_x <- c(time_x,t)
speeds_x <- c(speeds_x,vx)
}
}
}
x_times <- cbind(time_x,speeds_x)
time_y <- c()
speeds_y <- c()
max_vy <- max(abs(target_y))
for (vy in 0:max_vy){
y = 0
t <- 2*vy+1
speed <- vy
while (y > min(target_y)){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
}
y_times <- cbind(time_y,speeds_y)
valid_y <- y_times[y_times[,1] %in% x_times[,1],]
valid_y
c_bind(x_times,y_times)
cbind(x_times,y_times)
y_times
x_times
time_x <- c()
speeds_x <- c()
final_vx <- c()
max_vx <- max(target_x)
quad1 <- round(-0.5 + sqrt(1+(8*min(target_x)))*0.5)
quad2 <- round(-0.5 - sqrt(1+(8*min(target_x)))*0.5)
vals <- c(quad1,quad2)
if (min(target_x) > 0){
min_vx <- min(vals[vals > 0])
}
elif (min(target_x) < 0) {
min_vx <- max(vals[vals < 0])
}
for (vx in min_vx:max_vx){
t <- 0
x <- 0
speed <- vx
while (x < max(target_x) & speed > 0) {
x <- x + speed
speed <- speed - 1
t <- t + 1
if (x >= min(target_x) & x <= max(target_x)){
time_x <- c(time_x,t)
speeds_x <- c(speeds_x,vx)
final_vx <- c(final_vx,speed)
}
}
}
x_times <- cbind(time_x,speeds_x)
time_y <- c()
speeds_y <- c()
max_vy <- max(abs(target_y))
for (vy in 0:max_vy){
y = 0
t <- 2*vy+1
speed <- vy
while (y > min(target_y)){
y <- y - speed
t <- t + 1
speed <- speed + 1
if (y >= min(target_y) & y <= max(target_y)){
time_y <- c(time_y,t)
speeds_y <- c(speeds_y,vy)
}
}
}
y_times <- cbind(time_y,speeds_y)
valid_y <- y_times[y_times[,1] %in% x_times[,1],]
valid_y
y_times
x_times
x_times <- cbind(time_x,speeds_x,final_vx)
x_times
super_vx <- x_times[x_times[,3] == 0,1:2]
super_vx
y_times
